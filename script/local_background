#!/usr/bin/env python

import sys, os, datetime, pytz
from daemon import Daemon
from utils.background import YtScheduleBG
from django.db.models import Q

path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
rundir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../run'))
sys.path.append(path)
os.environ["DJANGO_SETTINGS_MODULE"] = "ytschedule.settings"

from room.models import *

class LocalBackground(YtScheduleBG):
  def work(self):
    now = datetime.datetime.now(self.tz)
    query = Room.objects.filter(Q(state="published") | Q(state="testing") | Q(state="live"))
    query = query.filter(start_time__lte=now+datetime.timedelta(seconds=60*60))
    query = query.filter(end_time__gte=now-datetime.timedelta(seconds=30*60))
    query = query.filter(name=self.configuration['room_name'])
    if len(query) > 0:
      for result in query:
        logging.debug("[%s]: %s -- %s %s"%(result.title, result.start_time, result.end_time, result.state))
        minutes = (result.start_time-now).total_seconds()/60
        if minutes < 20 and (result.state == "testing" or result.state == "published"):
          logging.debug("ensure currently streaming")
          #exec sudo service youtube_1080 stop
          logging.debug("Set liveStream to Live.")
          #result.set_live()
        elif minutes < 60 and result.state == "published":
          logging.debug("ensure currently streaming")
          #exec sudo service youtube_1080 stop
          logging.debug("Set liveStream to Testing.")
          #result.set_testing()
        elif (result.end_time-now).total_seconds()/60 < -20 and result.state == "live":
          logging.debug("Set liveStream to Complete.")
          #result.set_complete()
        elif (result.end_time-now).total_seconds()/60 < -20 and result.state == "completed":
          logging.debug("Stop youtube streamer.")
          #exec sudo service youtube_1080 stop
        
        q = Talk.objects.filter(room=result)
        q = q.filter(start_time__lte=now+datetime.timedelta(seconds=5*60))
        q = q.filter(end_time__gte=now-datetime.timedelta(seconds=15*60))
        if len(q) > 0:
          for talk in q:
            logging.debug( "[%s]: %s -- %s"%(talk.title, talk.start_time, talk.end_time) )
            minutes = (talk.start_time-now).total_seconds()/60
            if minutes < 5 and talk.state == "created"):
              logging.debug("Set liveStream to Live.")
              #result.set_live()
            elif (talk.end_time-now).total_seconds()/60 < -10 and talk.state == "live"):
              logging.debug("Set liveStream to Live.")
              #result.set_complete()


if __name__ == "__main__":
  daemon = LocalBackground( os.path.join(rundir, "%s.pid" % os.path.basename(__file__)) )
  daemon.process_cmd(sys.argv)


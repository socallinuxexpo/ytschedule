#!/usr/bin/python

import datetime
import pytz
import iso8601
from xml.etree.ElementTree import Element, SubElement, dump, parse, tostring, fromstring
import os, sys
import django
from daemon import Daemon

rundir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../run'))

path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(path)
os.environ["DJANGO_SETTINGS_MODULE"] = "ytschedule.settings"

from room.models import *

TIME_ZONE ='America/Los_Angeles'

tz = pytz.timezone(TIME_ZONE)

if __name__ == "__main__":
  django.setup()

  logger = logging.getLogger()
  logger.setLevel(logging.DEBUG)

  ch = logging.StreamHandler(sys.stdout)
  ch.setLevel(logging.DEBUG)
  formatter = logging.Formatter('%(levelname)s - %(message)s')
  ch.setFormatter(formatter)
  logger.addHandler(ch)
  
  base_url = "http://www.socallinuxexpo.org"
  root = parse('sign.xml').getroot()

  rooms = {}

  for node in root:
    start = fromstring(node.findtext("Time")).findall("span")[0].get("content")
    end = fromstring(node.findtext("Time")).findall("span")[1].get("content")
    start_time = iso8601.parse_date(start)
    end_time = iso8601.parse_date(end)
    roomname = node.findtext("Room")
    comp = "%s %s"%(room,start_time.strftime('%A %b. %d - SCaLE 14x'))
  
    q = Room.objects.filter(title=comp)
    if len(q) == 0:
      #print "not found"
      room_obj = Room(name=roomname, title=comp, start_time=start_time, end_time=end_time)
      room_obj.save()
    else:
      #print "found"
      room_obj = q[0]
    #print room.start_time.astimezone(tz)
    # Handle room
    if comp in rooms.keys():
      if rooms[comp]["start"] > start_time:
        rooms[comp]["start"] = start_time
      if rooms[comp]["end"] < end_time:
        rooms[comp]["end"] = end_time
    else:
      rooms[comp] = {"start": start_time, "end": end_time}
    title = node.findtext("Title")
    speaker = node.findtext("Speakers")
    url = "%s%s" %(base_url, node.findtext("Path"))
    description = "Talk by %s\n\n%s\nMore info at: %s\n" %(speaker, django.utils.html.strip_tags(node.findtext("Short-abstract")), url)
    q = Talk.objects.filter(title=title)
    if len(q) == 0:
      talk = Talk(room_id=room_obj.id, title=title, start_time=start_time, end_time=end_time)
    else:
      talk = q[0]
    talk.start_time = start_time
    talk.end_time = end_time
    talk.description = description
    talk.talk_url = url
    talk.speaker_name = node.findtext("Speakers")
    talk.save()
    
  


  for room in rooms:
    #add room
    print "%s: %s <--> %s" %(room, rooms[room]["start"], rooms[room]["end"])
    room_obj = Room.objects.filter(title=room)[0]
    print room_obj 
    room_obj.start_time=rooms[room]["start"]
    room_obj.end_time=rooms[room]["end"]
    room_obj.save()
